// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(GNBCContext))]
    partial class GNBCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BibleStudyUserFavorite", b =>
                {
                    b.Property<Guid>("BibleStudiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserFavoritesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BibleStudiesId", "UserFavoritesId");

                    b.HasIndex("UserFavoritesId");

                    b.ToTable("BibleStudyUserFavorite");
                });

            modelBuilder.Entity("BlogPostBlogPostCategory", b =>
                {
                    b.Property<Guid>("BlogCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogCategoriesId", "BlogPostsId");

                    b.HasIndex("BlogPostsId");

                    b.ToTable("BlogPostBlogPostCategory");
                });

            modelBuilder.Entity("BlogPostUserFavorite", b =>
                {
                    b.Property<Guid>("BlogPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserFavoritesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogPostsId", "UserFavoritesId");

                    b.HasIndex("UserFavoritesId");

                    b.ToTable("BlogPostUserFavorite");
                });

            modelBuilder.Entity("Domain.BibleStudy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BibleStudyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BibleStudyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BibleStudyVideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BibleStudies");
                });

            modelBuilder.Entity("Domain.BlogComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments");
                });

            modelBuilder.Entity("Domain.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogPostContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlogPostImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlogPostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("Domain.BlogPostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogPostCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BlogPostCategories");
                });

            modelBuilder.Entity("Domain.ChurchEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChurchEventDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChurchEventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChurchEventFacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChurchEventImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChurchEventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ChurchEvents");
                });

            modelBuilder.Entity("Domain.Sermon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("SermonDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SermonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SermonVideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sermons");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanBlog")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.UserFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BibleStudyCount")
                        .HasColumnType("int");

                    b.Property<int>("BlogPostCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("SermonCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("SermonUserFavorite", b =>
                {
                    b.Property<Guid>("SermonsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserFavoritesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SermonsId", "UserFavoritesId");

                    b.HasIndex("UserFavoritesId");

                    b.ToTable("SermonUserFavorite");
                });

            modelBuilder.Entity("BibleStudyUserFavorite", b =>
                {
                    b.HasOne("Domain.BibleStudy", null)
                        .WithMany()
                        .HasForeignKey("BibleStudiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.UserFavorite", null)
                        .WithMany()
                        .HasForeignKey("UserFavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogPostBlogPostCategory", b =>
                {
                    b.HasOne("Domain.BlogPostCategory", null)
                        .WithMany()
                        .HasForeignKey("BlogCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogPostUserFavorite", b =>
                {
                    b.HasOne("Domain.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.UserFavorite", null)
                        .WithMany()
                        .HasForeignKey("UserFavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.BlogComment", b =>
                {
                    b.HasOne("Domain.BlogPost", "BlogPost")
                        .WithMany("BlogPostComments")
                        .HasForeignKey("BlogPostId");

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("BlogPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.BlogPost", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("BlogPosts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.UserFavorite", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithOne("UserFavorite")
                        .HasForeignKey("Domain.UserFavorite", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SermonUserFavorite", b =>
                {
                    b.HasOne("Domain.Sermon", null)
                        .WithMany()
                        .HasForeignKey("SermonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.UserFavorite", null)
                        .WithMany()
                        .HasForeignKey("UserFavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.BlogPost", b =>
                {
                    b.Navigation("BlogPostComments");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("UserFavorite");
                });
#pragma warning restore 612, 618
        }
    }
}
